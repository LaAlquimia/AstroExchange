---
import Icon from "astro-icon";

interface Props {
  size?: "md" | "lg";
}

const { size = "md" } = Astro.props;
---

<button
  type="button"
  class="text-green-500 hover:scale-105 rounded-full flex items-center justify-center mx-5 my-auto"
  class:list={[size === "md" && "h-8 w-8", size === "lg" && "h-12 w-12"]}
  id ="login-button"
><a 
id="WalletAddress"
class="hidden">
0x0000</a>
  <Icon
    name="carbon:login"
    class:list={[size === "md" && "h-8 w-8", size === "lg" && "h-10 w-10"]}
  />
</button>
<script src="https://cdn.ethers.io/lib/ethers-5.6.4.umd.min.js" type="application/javascript"></script>
<script>
  const login = document.querySelector("#login-button");
  login.addEventListener("click", async () => {    
    function web3_check_metamask() {
        if (!window.ethereum) {
            console.error('It seems that the MetaMask extension is not detected. Please install MetaMask first.');
            alert('It seems that the MetaMask extension is not detected. Please install MetaMask first.');
            return false;
        }else{
            console.log('MetaMask extension has been detected!!');
            return true;
        }
    }

    function web3_metamask_hash(){
        var hashed_string   = '';
        var chars           = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
        var total_chars     = chars.length;
        for ( var i = 0; i < 256; i++ ) {
            hashed_string += chars.charAt(Math.floor(Math.random() * total_chars));
        }
        return hashed_string;
    }

    async function web3_metamask_login() {
        // Check first if the user has the MetaMask installed
        if ( web3_check_metamask() ) {
            console.log('Initate Login Process');

            // Get the Ethereum provider
            const provider = new ethers.providers.Web3Provider(window.ethereum);
            // Get Ethereum accounts
            await provider.send("eth_requestAccounts", []);
            console.log("Connected!!");
            // Get the User Ethereum address
            const address = await provider.getSigner().getAddress();
            console.log(address);

            // Create hashed string
            const hashed_string = web3_metamask_hash();
            console.log("Hashed string: " + hashed_string);
            // Request the user to sign it
            const signature = await provider.getSigner().signMessage(hashed_string);
            // Got the signature
            console.log("The signature: " + signature);
            // cut addres to first 4 chars
            document.getElementById("WalletAddress").innerHTML = address.substring(0, 4) ;
            document.getElementById("WalletAddress").classList.remove("hidden");

        }
    }
    
    web3_metamask_login();
  });
</script>

<script>